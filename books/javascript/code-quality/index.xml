<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Quality on Project Madurai School</title>
    <link>/books/javascript/code-quality/</link>
    <description>Recent content in Code Quality on Project Madurai School</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Nov 2018 19:02:50 -0700</lastBuildDate><atom:link href="/books/javascript/code-quality/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging in Chrome</title>
      <link>/books/javascript/code-quality/debugging-in-chrome/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/debugging-in-chrome/</guid>
      <description>Debugging in Chrome Before writing more complex code, let&amp;rsquo;s talk about debugging.
Debugging is the process of finding and fixing errors within a script. All modern browsers and most other environments support debugging tools &amp;ndash; a special UI in developer tools that makes debugging much easier. It also allows to trace the code step by step to see what exactly is going on.
We&amp;rsquo;ll be using Chrome here, because it has enough features, most other browsers have a similar process.</description>
    </item>
    
    <item>
      <title>Coding Style</title>
      <link>/books/javascript/code-quality/coding-style/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/coding-style/</guid>
      <description>Coding Style Our code must be as clean and easy to read as possible.
That is actually the art of programming &amp;ndash; to take a complex task and code it in a way that is both correct and human-readable. A good code style greatly assists in that.
Syntax Here is a cheat sheet with some suggested rules (see below for more details):
Now let&amp;rsquo;s discuss the rules and reasons for them in detail.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>/books/javascript/code-quality/comments/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/comments/</guid>
      <description>Comments As we know from the chapter info:structure, comments can be single-line: starting with // and multiline: /* ... */.
We normally use them to describe how and why the code works.
At first sight, commenting might be obvious, but novices in programming often use them wrongly.
Bad comments Novices tend to use comments to explain &amp;ldquo;what is going on in the code&amp;rdquo;. Like this:
// This code will do this thing (.</description>
    </item>
    
    <item>
      <title>Ninja code</title>
      <link>/books/javascript/code-quality/ninja-code/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/ninja-code/</guid>
      <description>Ninja code Learning without thought is labor lost; thought without learning is perilous. Programmer ninjas of the past used these tricks to sharpen the mind of code maintainers.
Code review gurus look for them in test tasks.
Novice developers sometimes use them even better than programmer ninjas.
Read them carefully and find out who you are &amp;ndash; a ninja, a novice, or maybe a code reviewer?
Many try to follow ninja paths.</description>
    </item>
    
    <item>
      <title>Automated testing with Mocha</title>
      <link>/books/javascript/code-quality/automatted-testing-with-mocha/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/automatted-testing-with-mocha/</guid>
      <description>Automated testing with Mocha Automated testing will be used in further tasks, and it&amp;rsquo;s also widely used in real projects.
Why do we need tests? When we write a function, we can usually imagine what it should do: which parameters give which results.
During development, we can check the function by running it and comparing the outcome with the expected one. For instance, we can do it in the console.</description>
    </item>
    
    <item>
      <title>Polyfills and transpilers</title>
      <link>/books/javascript/code-quality/polyfills/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/code-quality/polyfills/</guid>
      <description>Polyfills and transpilers The JavaScript language steadily evolves. New proposals to the language appear regularly, they are analyzed and, if considered worthy, are appended to the list at https://tc39.github.io/ecma262/ and then progress to the specification.
Teams behind JavaScript engines have their own ideas about what to implement first. They may decide to implement proposals that are in draft and postpone things that are already in the spec, because they are less interesting or just harder to do.</description>
    </item>
    
  </channel>
</rss>
