<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced Working with Functions on Project Madurai School</title>
    <link>/books/javascript/advanced-working-with-functions/</link>
    <description>Recent content in Advanced Working with Functions on Project Madurai School</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Nov 2018 19:02:50 -0700</lastBuildDate><atom:link href="/books/javascript/advanced-working-with-functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recursion and stack</title>
      <link>/books/javascript/advanced-working-with-functions/recursion/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/recursion/</guid>
      <description>Recursion and stack Let&amp;rsquo;s return to functions and study them more in-depth.
Our first topic will be recursion.
If you are not new to programming, then it is probably familiar and you could skip this chapter.
Recursion is a programming pattern that is useful in situations when a task can be naturally split into several tasks of the same kind, but simpler. Or when a task can be simplified into an easy action plus a simpler variant of the same task.</description>
    </item>
    
    <item>
      <title>Rest parameters and spread syntax</title>
      <link>/books/javascript/advanced-working-with-functions/rest-parameters-spread/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/rest-parameters-spread/</guid>
      <description>Rest parameters and spread syntax Many JavaScript built-in functions support an arbitrary number of arguments.
For instance:
 Math.max(arg1, arg2, ..., argN) &amp;ndash; returns the greatest of the arguments. Object.assign(dest, src1, ..., srcN) &amp;ndash; copies properties from src1..N into dest. &amp;hellip;and so on.  In this chapter we&amp;rsquo;ll learn how to do the same. And also, how to pass arrays to such functions as parameters.
Rest parameters ... A function can be called with any number of arguments, no matter how it is defined.</description>
    </item>
    
    <item>
      <title>Variable scope, closure</title>
      <link>/books/javascript/advanced-working-with-functions/closure/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/closure/</guid>
      <description>Variable scope, closure JavaScript is a very function-oriented language. It gives us a lot of freedom. A function can be created at any moment, passed as an argument to another function, and then called from a totally different place of code later.
We already know that a function can access variables outside of it (&amp;ldquo;outer&amp;rdquo; variables).
But what happens if outer variables change since a function is created? Will the function get newer values or the old ones?</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>/books/javascript/advanced-working-with-functions/variables/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/variables/</guid>
      <description>Variables Most of the time, a JavaScript application needs to work with information. Here are two examples:
 An online shop &amp;ndash; the information might include goods being sold and a shopping cart. A chat application &amp;ndash; the information might include users, messages, and much more.  Variables are used to store this information.
A variable A variable is a &amp;ldquo;named storage&amp;rdquo; for data. We can use variables to store goodies, visitors, and other data.</description>
    </item>
    
    <item>
      <title>Global object</title>
      <link>/books/javascript/advanced-working-with-functions/global-object/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/global-object/</guid>
      <description>Global object The global object provides variables and functions that are available anywhere. By default, those that are built into the language or the environment.
In a browser it is named window, for Node.js it is global, for other environments it may have another name.
Recently, globalThis was added to the language, as a standardized name for a global object, that should be supported across all environments. It&amp;rsquo;s supported in all major browsers.</description>
    </item>
    
    <item>
      <title>Function object, NFE</title>
      <link>/books/javascript/advanced-working-with-functions/function-object/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/function-object/</guid>
      <description>Function object, NFE As we already know, a function in JavaScript is a value.
Every value in JavaScript has a type. What type is a function?
In JavaScript, functions are objects.
A good way to imagine functions is as callable &amp;ldquo;action objects&amp;rdquo;. We can not only call them, but also treat them as objects: add/remove properties, pass by reference etc.
The &amp;ldquo;name&amp;rdquo; property Function objects contain some useable properties.
For instance, a function&amp;rsquo;s name is accessible as the &amp;ldquo;name&amp;rdquo; property:</description>
    </item>
    
    <item>
      <title>The &#34;new Function&#34; syntax</title>
      <link>/books/javascript/advanced-working-with-functions/new-function/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/new-function/</guid>
      <description>The &amp;ldquo;new Function&amp;rdquo; syntax There&amp;rsquo;s one more way to create a function. It&amp;rsquo;s rarely used, but sometimes there&amp;rsquo;s no alternative.
Syntax The syntax for creating a function:
let func = new Function ([arg1, arg2, ...argN], functionBody); The function is created with the arguments arg1...argN and the given functionBody.
It&amp;rsquo;s easier to understand by looking at an example. Here&amp;rsquo;s a function with two arguments:
let sum = new Function(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;return a + b&amp;#39;); alert( sum(1, 2) ); // 3 And here there&amp;rsquo;s a function without arguments, with only the function body:</description>
    </item>
    
    <item>
      <title>Scheduling: setTimeout and setInterval</title>
      <link>/books/javascript/advanced-working-with-functions/settimeout-setinterval/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/settimeout-setinterval/</guid>
      <description>Scheduling: setTimeout and setInterval We may decide to execute a function not right now, but at a certain time later. That&amp;rsquo;s called &amp;ldquo;scheduling a call&amp;rdquo;.
There are two methods for it:
 setTimeout allows us to run a function once after the interval of time. setInterval allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval.  These methods are not a part of JavaScript specification.</description>
    </item>
    
    <item>
      <title>Decorators and forwarding, call/apply</title>
      <link>/books/javascript/advanced-working-with-functions/call-apply-decorators/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/call-apply-decorators/</guid>
      <description>Decorators and forwarding, call/apply JavaScript gives exceptional flexibility when dealing with functions. They can be passed around, used as objects, and now we&amp;rsquo;ll see how to forward calls between them and decorate them.
Transparent caching Let&amp;rsquo;s say we have a function slow(x) which is CPU-heavy, but its results are stable. In other words, for the same x it always returns the same result.
If the function is called often, we may want to cache (remember) the results to avoid spending extra-time on recalculations.</description>
    </item>
    
    <item>
      <title>Function binding</title>
      <link>/books/javascript/advanced-working-with-functions/bind/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/bind/</guid>
      <description>Function binding When passing object methods as callbacks, for instance to setTimeout, there&amp;rsquo;s a known problem: &amp;ldquo;losing this&amp;rdquo;.
In this chapter we&amp;rsquo;ll see the ways to fix it.
Losing &amp;ldquo;this&amp;rdquo; We&amp;rsquo;ve already seen examples of losing this. Once a method is passed somewhere separately from the object &amp;ndash; this is lost.
Here&amp;rsquo;s how it may happen with setTimeout:
let user = { firstName: &amp;#34;John&amp;#34;, sayHi() { alert(`Hello, ${this.firstName}!`); } }; *!</description>
    </item>
    
    <item>
      <title>Arrow functions revisited</title>
      <link>/books/javascript/advanced-working-with-functions/arrow-functions/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/advanced-working-with-functions/arrow-functions/</guid>
      <description>Arrow functions revisited Let&amp;rsquo;s revisit arrow functions.
Arrow functions are not just a &amp;ldquo;shorthand&amp;rdquo; for writing small stuff. They have some very specific and useful features.
JavaScript is full of situations where we need to write a small function that&amp;rsquo;s executed somewhere else.
For instance:
 arr.forEach(func) &amp;ndash; func is executed by forEach for every array item. setTimeout(func) &amp;ndash; func is executed by the built-in scheduler. &amp;hellip;there are more.  It&amp;rsquo;s in the very spirit of JavaScript to create a function and pass it somewhere.</description>
    </item>
    
  </channel>
</rss>
