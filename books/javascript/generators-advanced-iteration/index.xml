<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generators, advanced iteration on Project Madurai School</title>
    <link>/books/javascript/generators-advanced-iteration/</link>
    <description>Recent content in Generators, advanced iteration on Project Madurai School</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Nov 2018 19:02:50 -0700</lastBuildDate><atom:link href="/books/javascript/generators-advanced-iteration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generators</title>
      <link>/books/javascript/generators-advanced-iteration/generators/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/generators-advanced-iteration/generators/</guid>
      <description>Generators Regular functions return only one, single value (or nothing).
Generators can return (&amp;ldquo;yield&amp;rdquo;) multiple values, one after another, on-demand. They work great with iterables, allowing to create data streams with ease.
Generator functions To create a generator, we need a special syntax construct: function*, so-called &amp;ldquo;generator function&amp;rdquo;.
It looks like this:
function* generateSequence() { yield 1; yield 2; return 3; } Generator functions behave differently from regular ones. When such function is called, it doesn&amp;rsquo;t run its code.</description>
    </item>
    
    <item>
      <title>Async iteration and generators</title>
      <link>/books/javascript/generators-advanced-iteration/async-iterators-generators/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/books/javascript/generators-advanced-iteration/async-iterators-generators/</guid>
      <description>Async iteration and generators Asynchronous iteration allow us to iterate over data that comes asynchronously, on-demand. Like, for instance, when we download something chunk-by-chunk over a network. And asynchronous generators make it even more convenient.
Let&amp;rsquo;s see a simple example first, to grasp the syntax, and then review a real-life use case.
Recall iterables Let&amp;rsquo;s recall the topic about iterables.
The idea is that we have an object, such as range here:</description>
    </item>
    
  </channel>
</rss>
