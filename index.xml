<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Madurai School</title>
    <link>/project-madurai-website/</link>
    <description>Recent content on Project Madurai School</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Nov 2018 19:02:50 -0700</lastBuildDate><atom:link href="/project-madurai-website/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Prototypal inheritance</title>
      <link>/project-madurai-website/books/thirukural/prototypes-inheritance/prototypeinheritance/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/thirukural/prototypes-inheritance/prototypeinheritance/</guid>
      <description>Prototypal inheritance In programming, we often want to take something and extend it.
For instance, we have a user object with its properties and methods, and want to make admin and guest as slightly modified variants of it. We&amp;rsquo;d like to reuse what we have in user, not copy/reimplement its methods, just build a new object on top of it.
Prototypal inheritance is a language feature that helps in that.</description>
    </item>
    
    <item>
      <title>What are Arrays</title>
      <link>/project-madurai-website/books/aathichoodi/array/what-are-array/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/what-are-array/</guid>
      <description></description>
    </item>
    
    <item>
      <title>F.prototype</title>
      <link>/project-madurai-website/books/thirukural/prototypes-inheritance/function-prototype/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/thirukural/prototypes-inheritance/function-prototype/</guid>
      <description>F.prototype Remember, new objects can be created with a constructor function, like new F().
If F.prototype is an object, then the new operator uses it to set [[Prototype]] for the new object.
JavaScript had prototypal inheritance from the beginning. It was one of the core features of the language. But in the old times, there was no direct access to it. The only thing that worked reliably was a `&amp;quot;prototype&amp;quot;` property of the constructor function, described in this chapter.</description>
    </item>
    
    <item>
      <title>More on Arrays</title>
      <link>/project-madurai-website/books/aathichoodi/array/more-on-array/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/more-on-array/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Native prototypes</title>
      <link>/project-madurai-website/books/thirukural/prototypes-inheritance/nativeprototypes/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/thirukural/prototypes-inheritance/nativeprototypes/</guid>
      <description>Native prototypes The &amp;quot;prototype&amp;quot; property is widely used by the core of JavaScript itself. All built-in constructor functions use it.
First we&amp;rsquo;ll see at the details, and then how to use it for adding new capabilities to built-in objects.
Object.prototype Let&amp;rsquo;s say we output an empty object:
let obj = {}; alert( obj ); // &amp;#34;[object Object]&amp;#34; ? Where&amp;rsquo;s the code that generates the string &amp;quot;[object Object]&amp;quot;? That&amp;rsquo;s a built-in toString method, but where is it?</description>
    </item>
    
    <item>
      <title>Pointers and Arrays</title>
      <link>/project-madurai-website/books/aathichoodi/array/pointers-and-arrays/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/pointers-and-arrays/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flexible Arrays</title>
      <link>/project-madurai-website/books/aathichoodi/array/flexible-arrays/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/flexible-arrays/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Prototype methods, objects without __proto__</title>
      <link>/project-madurai-website/books/thirukural/prototypes-inheritance/prototypemethods/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/thirukural/prototypes-inheritance/prototypemethods/</guid>
      <description>Prototype methods, objects without proto In the first chapter of this section, we mentioned that there are modern methods to setup a prototype.
The __proto__ is considered outdated and somewhat deprecated (in browser-only part of the JavaScript standard).
The modern methods are:
 Object.create(proto, [descriptors]) &amp;ndash; creates an empty object with given proto as [[Prototype]] and optional property descriptors. Object.getPrototypeOf(obj) &amp;ndash; returns the [[Prototype]] of obj. Object.setPrototypeOf(obj, proto) &amp;ndash; sets the [[Prototype]] of obj to proto.</description>
    </item>
    
    <item>
      <title>Exercise</title>
      <link>/project-madurai-website/books/aathichoodi/array/exercise/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/exercise/</guid>
      <description></description>
    </item>
    
    <item>
      <title>KanNotes</title>
      <link>/project-madurai-website/books/aathichoodi/array/kannotes/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/books/aathichoodi/array/kannotes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A1</title>
      <link>/project-madurai-website/posts/articles/a1/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/posts/articles/a1/</guid>
      <description>I am a1</description>
    </item>
    
    <item>
      <title>A2</title>
      <link>/project-madurai-website/posts/articles/a2/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/posts/articles/a2/</guid>
      <description>I am a2</description>
    </item>
    
    <item>
      <title>A3</title>
      <link>/project-madurai-website/posts/articles/a3/</link>
      <pubDate>Wed, 14 Nov 2018 19:02:50 -0700</pubDate>
      
      <guid>/project-madurai-website/posts/articles/a3/</guid>
      <description>I am a3</description>
    </item>
    
  </channel>
</rss>
